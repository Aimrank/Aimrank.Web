// <auto-generated />
using System;
using Aimrank.Web.Modules.Cluster.Infrastructure;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;

namespace Aimrank.Web.Database.Migrator.Migrations.Cluster
{
    [DbContext(typeof(ClusterContext))]
    [Migration("20210424173850_Initial")]
    partial class Initial
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasDefaultSchema("cluster")
                .UseIdentityByDefaultColumns()
                .HasAnnotation("Relational:MaxIdentifierLength", 63)
                .HasAnnotation("ProductVersion", "5.0.5");

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Application.Entities.Pod", b =>
                {
                    b.Property<string>("IpAddress")
                        .HasColumnType("text")
                        .HasColumnName("ip_address");

                    b.Property<int>("MaxServers")
                        .HasColumnType("integer")
                        .HasColumnName("max_servers");

                    b.HasKey("IpAddress")
                        .HasName("pk_pods");

                    b.ToTable("pods");
                });

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Application.Entities.Server", b =>
                {
                    b.Property<Guid>("MatchId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("match_id");

                    b.Property<bool>("IsAccepted")
                        .HasColumnType("boolean")
                        .HasColumnName("is_accepted");

                    b.Property<string>("PodIpAddress")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("pod_ip_address");

                    b.Property<string>("SteamTokenToken")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("steam_token_token");

                    b.HasKey("MatchId")
                        .HasName("pk_servers");

                    b.HasIndex("PodIpAddress")
                        .HasDatabaseName("ix_servers_pod_ip_address");

                    b.HasIndex("SteamTokenToken")
                        .IsUnique()
                        .HasDatabaseName("ix_servers_steam_token_token");

                    b.ToTable("servers");
                });

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Application.Entities.SteamToken", b =>
                {
                    b.Property<string>("Token")
                        .HasColumnType("text")
                        .HasColumnName("token");

                    b.HasKey("Token")
                        .HasName("pk_steam_tokens");

                    b.ToTable("steam_tokens");
                });

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Infrastructure.Configuration.Processing.Inbox.InboxMessage", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uuid")
                        .HasColumnName("id");

                    b.Property<string>("Data")
                        .IsRequired()
                        .HasColumnType("text")
                        .HasColumnName("data");

                    b.Property<DateTime>("OccurredOn")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("occurred_on");

                    b.Property<DateTime?>("ProcessedDate")
                        .HasColumnType("timestamp without time zone")
                        .HasColumnName("processed_date");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("character varying(255)")
                        .HasColumnName("type");

                    b.HasKey("Id")
                        .HasName("pk_inbox_messages");

                    b.ToTable("inbox_messages");
                });

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Application.Entities.Server", b =>
                {
                    b.HasOne("Aimrank.Web.Modules.Cluster.Application.Entities.Pod", "Pod")
                        .WithMany("Servers")
                        .HasForeignKey("PodIpAddress")
                        .HasConstraintName("fk_servers_pods_pod_ip_address")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Aimrank.Web.Modules.Cluster.Application.Entities.SteamToken", "SteamToken")
                        .WithOne("Server")
                        .HasForeignKey("Aimrank.Web.Modules.Cluster.Application.Entities.Server", "SteamTokenToken")
                        .HasConstraintName("fk_servers_steam_tokens_steam_token_token")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Pod");

                    b.Navigation("SteamToken");
                });

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Application.Entities.Pod", b =>
                {
                    b.Navigation("Servers");
                });

            modelBuilder.Entity("Aimrank.Web.Modules.Cluster.Application.Entities.SteamToken", b =>
                {
                    b.Navigation("Server");
                });
#pragma warning restore 612, 618
        }
    }
}
